From c394106e146f79d36643f82f581652ed97bb75c7 Mon Sep 17 00:00:00 2001
From: Gedare Bloom <gedare@rtems.org>
Date: Tue, 7 May 2013 13:32:32 -0400
Subject: [PATCH] profile mode: Add Statistics for vector and map.

---
 libstdc++-v3/include/Makefile.am                   |    3 +
 libstdc++-v3/include/Makefile.in                   |    4 +
 libstdc++-v3/include/profile/impl/profiler.h       |  103 +++++
 .../profile/impl/profiler_container_statistics.h   |  408 ++++++++++++++++++++
 .../include/profile/impl/profiler_map_statistics.h |  151 ++++++++
 libstdc++-v3/include/profile/impl/profiler_trace.h |   12 +
 .../profile/impl/profiler_vector_statistics.h      |  135 +++++++
 libstdc++-v3/include/profile/map.h                 |   99 ++++-
 libstdc++-v3/include/profile/vector                |   48 ++-
 9 files changed, 942 insertions(+), 21 deletions(-)
 create mode 100644 libstdc++-v3/include/profile/impl/profiler_container_statistics.h
 create mode 100644 libstdc++-v3/include/profile/impl/profiler_map_statistics.h
 create mode 100644 libstdc++-v3/include/profile/impl/profiler_vector_statistics.h

diff --git a/libstdc++-v3/include/Makefile.am b/libstdc++-v3/include/Makefile.am
index 11cb4df..05e7091 100644
--- a/libstdc++-v3/include/Makefile.am
+++ b/libstdc++-v3/include/Makefile.am
@@ -809,13 +809,16 @@ profile_impl_headers = \
 	${profile_impl_srcdir}/profiler.h \
 	${profile_impl_srcdir}/profiler_algos.h \
 	${profile_impl_srcdir}/profiler_container_size.h \
+	${profile_impl_srcdir}/profiler_container_statistics.h \
 	${profile_impl_srcdir}/profiler_hash_func.h \
 	${profile_impl_srcdir}/profiler_hashtable_size.h \
+	${profile_impl_srcdir}/profiler_map_statistics.h \
 	${profile_impl_srcdir}/profiler_map_to_unordered_map.h \
 	${profile_impl_srcdir}/profiler_node.h \
 	${profile_impl_srcdir}/profiler_state.h \
 	${profile_impl_srcdir}/profiler_trace.h \
 	${profile_impl_srcdir}/profiler_vector_size.h \
+	${profile_impl_srcdir}/profiler_vector_statistics.h \
 	${profile_impl_srcdir}/profiler_vector_to_list.h \
 	${profile_impl_srcdir}/profiler_list_to_vector.h \
 	${profile_impl_srcdir}/profiler_list_to_slist.h
diff --git a/libstdc++-v3/include/Makefile.in b/libstdc++-v3/include/Makefile.in
index a644155..d899db4 100644
--- a/libstdc++-v3/include/Makefile.in
+++ b/libstdc++-v3/include/Makefile.in
@@ -1045,6 +1045,7 @@ profile_builddir = ./profile
 profile_headers = \
 	${profile_srcdir}/array \
 	${profile_srcdir}/base.h \
+	${profile_srcdir}/unordered_base.h \
 	${profile_srcdir}/unordered_map \
 	${profile_srcdir}/unordered_set \
 	${profile_srcdir}/vector \
@@ -1066,13 +1067,16 @@ profile_impl_headers = \
 	${profile_impl_srcdir}/profiler.h \
 	${profile_impl_srcdir}/profiler_algos.h \
 	${profile_impl_srcdir}/profiler_container_size.h \
+	${profile_impl_srcdir}/profiler_container_statistics.h \
 	${profile_impl_srcdir}/profiler_hash_func.h \
 	${profile_impl_srcdir}/profiler_hashtable_size.h \
+	${profile_impl_srcdir}/profiler_map_statistics.h \
 	${profile_impl_srcdir}/profiler_map_to_unordered_map.h \
 	${profile_impl_srcdir}/profiler_node.h \
 	${profile_impl_srcdir}/profiler_state.h \
 	${profile_impl_srcdir}/profiler_trace.h \
 	${profile_impl_srcdir}/profiler_vector_size.h \
+	${profile_impl_srcdir}/profiler_vector_statistics.h \
 	${profile_impl_srcdir}/profiler_vector_to_list.h \
 	${profile_impl_srcdir}/profiler_list_to_vector.h \
 	${profile_impl_srcdir}/profiler_list_to_slist.h
diff --git a/libstdc++-v3/include/profile/impl/profiler.h b/libstdc++-v3/include/profile/impl/profiler.h
index 081bb64..5233887 100644
--- a/libstdc++-v3/include/profile/impl/profiler.h
+++ b/libstdc++-v3/include/profile/impl/profiler.h
@@ -143,6 +143,25 @@ namespace __gnu_profile
   void __trace_map_to_unordered_map_iterate(const void*, std::size_t);
   void __trace_map_to_unordered_map_find(const void*, std::size_t);
   void __trace_map_to_unordered_map_destruct(const void*);
+
+  void __trace_vector_statistics_destruct(const void*, std::size_t, std::size_t);
+  void __trace_vector_statistics_construct(const void*, std::size_t);
+  void __trace_vector_statistics_insert(const void*, std::size_t, std::size_t);
+
+  void __trace_vector_statistics_erase(const void*, std::size_t, std::size_t);
+  void __trace_vector_statistics_invalid_operator(const void*);
+  void __trace_vector_statistics_resize(const void*, std::size_t, std::size_t);
+  void __trace_vector_statistics_push_back(const void*);
+
+  void __trace_map_statistics_destruct(const void*, std::size_t, std::size_t);
+  void __trace_map_statistics_construct(const void*, std::size_t);
+  void __trace_map_statistics_insert(const void*, std::size_t, std::size_t);
+  void __trace_map_statistics_erase(const void*, std::size_t, std::size_t);
+  void __trace_map_statistics_invalid_operator(const void*);
+  void __trace_map_statistics_find(const void*, std::size_t);
+  void __trace_map_statistics_lower_bound(const void*, std::size_t);
+  void __trace_map_statistics_upper_bound(const void*, std::size_t);
+  void __trace_map_statistics_equal_range(const void*, std::size_t);
 } // namespace __gnu_profile
 
 // Master switch turns on all diagnostics that are not explicitly turned off.
@@ -174,6 +193,12 @@ namespace __gnu_profile
 #ifndef _GLIBCXX_PROFILE_NO_MAP_TO_UNORDERED_MAP
 #define _GLIBCXX_PROFILE_MAP_TO_UNORDERED_MAP
 #endif
+#ifndef _GLIBCXX_PROFILE_NO_VECTOR_STATISTICS
+#define _GLIBCXX_PROFILE_VECTOR_STATISTICS
+#endif
+#ifndef _GLIBCXX_PROFILE_NO_MAP_STATISTICS
+#define _GLIBCXX_PROFILE_MAP_STATISTICS
+#endif
 #endif
 
 // Expose global management routines to user code.
@@ -364,6 +389,82 @@ namespace __gnu_profile
 #define __profcxx_map_to_unordered_map_find(__x...)
 #endif
 
+// Turn on/off instrumentation for VECTOR_STATISTICS.
+#if defined(_GLIBCXX_PROFILE_VECTOR_STATISTICS)
+#define __profcxx_vector_statistics_construct(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_vector_statistics_construct(__x))
+#define __profcxx_vector_statistics_destruct(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_vector_statistics_destruct(__x))
+#define __profcxx_vector_statistics_insert(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_vector_statistics_insert(__x))
+#define __profcxx_vector_statistics_erase(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_vector_statistics_erase(__x))
+#define __profcxx_vector_statistics_invalid_operator(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_vector_statistics_invalid_operator(__x))
+#define __profcxx_vector_statistics_resize(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_vector_statistics_resize(__x))
+#define __profcxx_vector_statistics_push_back(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_vector_statistics_push_back(__x))
+
+#else
+#define __profcxx_vector_statistics_destruct(__x...)
+#define __profcxx_vector_statistics_construct(__x...)
+#define __profcxx_vector_statistics_insert(__x...)
+#define __profcxx_vector_statistics_erase(__x...)
+#define __profcxx_vector_statistics_invalid_operator(__x...)
+#define __profcxx_vector_statistics_resize(__x...)
+#define __profcxx_vector_statistics_push_back(__x...)
+#endif
+
+// Turn on/off instrumentation for MAP_STATISTICS.
+#if defined(_GLIBCXX_PROFILE_MAP_STATISTICS)
+#define __profcxx_map_statistics_construct(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_map_statistics_construct(__x))
+#define __profcxx_map_statistics_destruct(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_map_statistics_destruct(__x))
+#define __profcxx_map_statistics_insert(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_map_statistics_insert(__x))
+#define __profcxx_map_statistics_erase(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_map_statistics_erase(__x))
+#define __profcxx_map_statistics_invalid_operator(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_map_statistics_invalid_operator(__x))
+#define __profcxx_map_statistics_find(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_map_statistics_find(__x))
+#define __profcxx_map_statistics_lower_bound(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_map_statistics_lower_bound(__x))
+#define __profcxx_map_statistics_upper_bound(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_map_statistics_upper_bound(__x))
+#define __profcxx_map_statistics_equal_range(__x...) \
+  _GLIBCXX_PROFILE_REENTRANCE_GUARD( \
+      __gnu_profile::__trace_map_statistics_equal_range(__x))
+#else
+#define __profcxx_map_statistics_destruct(__x...)
+#define __profcxx_map_statistics_construct(__x...)
+#define __profcxx_map_statistics_insert(__x...)
+#define __profcxx_map_statistics_erase(__x...)
+#define __profcxx_map_statistics_invalid_operator(__x...)
+#define __profcxx_map_statistics_find(__x...)
+#define __profcxx_map_statistics_lower_bound(__x...)
+#define __profcxx_map_statistics_upper_bound(__x...)
+#define __profcxx_map_statistics_equal_range(__x...)
+#endif
+
+
 // Set default values for compile-time customizable variables.
 #ifndef _GLIBCXX_PROFILE_TRACE_PATH_ROOT
 #define _GLIBCXX_PROFILE_TRACE_PATH_ROOT "libstdcxx-profile"
@@ -401,5 +502,7 @@ namespace __gnu_profile
 #include "profile/impl/profiler_vector_to_list.h"
 #include "profile/impl/profiler_list_to_slist.h"
 #include "profile/impl/profiler_list_to_vector.h"
+#include "profile/impl/profiler_vector_statistics.h"
+#include "profile/impl/profiler_map_statistics.h"
 
 #endif // _GLIBCXX_PROFILE_PROFILER_H
diff --git a/libstdc++-v3/include/profile/impl/profiler_container_statistics.h b/libstdc++-v3/include/profile/impl/profiler_container_statistics.h
new file mode 100644
index 0000000..8198e59
--- /dev/null
+++ b/libstdc++-v3/include/profile/impl/profiler_container_statistics.h
@@ -0,0 +1,408 @@
+// -*- C++ -*-
+//
+// Copyright (C) 2013 Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 3, or (at your option)
+// any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// Under Section 7 of GPL version 3, you are granted additional
+// permissions described in the GCC Runtime Library Exception, version
+// 3.1, as published by the Free Software Foundation.
+
+// You should have received a copy of the GNU General Public License along
+// with this library; see the file COPYING3.  If not see
+// <http://www.gnu.org/licenses/>.
+
+/** @file profile/impl/profiler_container_statistics.h
+ *  @brief Diagnostics for container statisticss.
+ */
+
+// Written by Gedare Bloom.
+
+#ifndef _GLIBCXX_PROFILE_PROFILER_CONTAINER_STATISTICS_H
+#define _GLIBCXX_PROFILE_PROFILER_CONTAINER_STATISTICS_H 1
+
+#include <sstream>
+
+#include "profile/impl/profiler.h"
+#include "profile/impl/profiler_node.h"
+#include "profile/impl/profiler_trace.h"
+
+namespace __gnu_profile
+{
+  /** @brief A container statistics instrumentation line in the object table. */
+  class __container_statistics_info
+    : public __object_info_base
+  {
+    public:
+      __container_statistics_info()
+        : _M_init(0), _M_max(0), _M_min(0), _M_total(0), _M_item_min(0),
+        _M_item_max(0), _M_item_total(0), _M_count(0), _M_resize(0), _M_cost(0),
+        _M_iterate(0), _M_insert(0), _M_erase(0), _M_find(0),
+        _M_lower_bound(0), _M_upper_bound(0), _M_equal_range(0),
+        _M_push_back(0)
+    { }
+
+      __container_statistics_info(const __container_statistics_info& __o)
+        : __object_info_base(__o), _M_init(__o._M_init), _M_max(__o._M_max),
+        _M_min(__o._M_min), _M_total(__o._M_total),
+        _M_item_min(__o._M_item_min), _M_item_max(__o._M_item_max),
+        _M_item_total(__o._M_item_total), _M_count(__o._M_count),
+        _M_resize(__o._M_resize), _M_cost(__o._M_cost),
+        _M_iterate(__o._M_iterate), _M_insert(__o._M_insert),
+        _M_erase(__o._M_erase), _M_find(__o._M_find),
+        _M_lower_bound(__o._M_lower_bound), _M_upper_bound(__o._M_upper_bound),
+        _M_equal_range(__o._M_equal_range), _M_push_back(__o._M_push_back)
+    { }
+
+      __container_statistics_info(__stack_t __stack, std::size_t __num)
+        : __object_info_base(__stack), _M_init(__num), _M_max(__num),
+        _M_min(0), _M_total(0), _M_item_min(0), _M_item_max(0),
+        _M_item_total(0), _M_count(0), _M_resize(0), _M_cost(0),
+        _M_iterate(0), _M_insert(0), _M_erase(0), _M_find(0),
+        _M_lower_bound(0), _M_upper_bound(0), _M_equal_range(0), _M_push_back(0)
+    { }
+
+      virtual ~__container_statistics_info() { }
+
+      void
+        __write(FILE* __f) const
+        {
+          std::fprintf(
+              __f,
+              "%p %Zu %Zu %Zu %Zu %Zu %Zu %Zu %Zu %Zu %Zu %Zu %Zu %Zu %Zu %Zu\n",
+              this, _M_init, _M_count, _M_cost, _M_resize, _M_min, _M_max,
+              _M_total, _M_item_min, _M_item_max, _M_item_total,
+              _M_iterate, _M_insert, _M_erase, _M_find, _M_lower_bound,
+              _M_upper_bound, _M_equal_range, _M_push_back);
+        }
+
+      float
+        __magnitude() const
+        { return static_cast<float>(_M_cost); }
+
+      std::string
+        __advice() const
+        {
+          std::stringstream __message;
+          if (_M_init < _M_item_max)
+            __message << "change initial container size from " << _M_init
+              << " to " << _M_item_max;
+          return __message.str();
+        }
+
+      void
+        __merge(const __container_statistics_info& __o)
+        {
+          _M_init         = std::max(_M_init, __o._M_init);
+          _M_max          = std::max(_M_max, __o._M_max);
+          _M_item_max     = std::max(_M_item_max, __o._M_item_max);
+          _M_min          = std::min(_M_min, __o._M_min);
+          _M_item_min     = std::min(_M_item_min, __o._M_item_min);
+          _M_total       += __o._M_total;
+          _M_item_total  += __o._M_item_total;
+          _M_count       += __o._M_count;
+          _M_cost        += __o._M_cost;
+          _M_insert      += __o._M_insert;
+          _M_erase       += __o._M_erase;
+          _M_iterate     += __o._M_iterate;
+          _M_find        += __o._M_find;
+          _M_lower_bound += __o._M_lower_bound;
+          _M_upper_bound += __o._M_upper_bound;
+          _M_equal_range += __o._M_equal_range;
+          _M_push_back   += __o._M_push_back;
+          _M_resize      += __o._M_resize;
+        }
+
+      // Call if a container is destructed or cleaned.
+      void
+        __opr_destruct(std::size_t __num, std::size_t __inum)
+        {
+          _M_max = std::max(_M_max, __num);
+          _M_item_max = std::max(_M_item_max, __inum);
+          if (_M_min == 0)
+          {
+            _M_min = __num;
+            _M_item_min = __inum;
+          }
+          else
+          {
+            _M_min = std::min(_M_min, __num);
+            _M_item_min = std::min(_M_item_min, __inum);
+          }
+          _M_total += __num;
+          _M_item_total += __inum;
+          _M_count += 1;
+        }
+
+      // Estimate the cost of resize/rehash.
+      float
+        __resize_cost(std::size_t __from, std::size_t)
+        { return __from; }
+
+      void
+        __opr_insert(std::size_t __pos, std::size_t __num)
+        { _M_insert += 1; }
+
+      void
+        __opr_iterate(std::size_t __num)
+        { _M_iterate += 1; }
+
+      void
+        __opr_erase(std::size_t __pos, std::size_t __num)
+        {
+          _M_erase += __num;
+          _M_item_total += __num; // include erased items in total
+        }
+
+      void
+        __opr_invalid_operator(const void* __obj)
+        {
+//          _M_valid = false;
+        }
+
+      // Call if container is resized.
+      void
+        __opr_resize(std::size_t __from, std::size_t __to)
+        {
+//          _M_cost += this->__resize_cost(__from, __to);
+          _M_resize += 1;
+          _M_max = std::max(_M_max, __to);
+        }
+
+      void
+        __opr_find(const void* __obj, std::size_t __size)
+        { _M_find += 1; }
+
+      void
+        __opr_lower_bound(const void* __obj, std::size_t __size)
+        { _M_lower_bound += 1; }
+
+      void
+        __opr_upper_bound(const void* __obj, std::size_t __size)
+        { _M_upper_bound += 1; }
+
+      void
+        __opr_equal_range(const void* __obj, std::size_t __size)
+        { _M_equal_range += 1; }
+
+      void
+        __opr_push_back( )
+        {_M_push_back += 1; }
+
+
+
+
+    private:
+      std::size_t _M_init;
+      std::size_t _M_max;  // range of # buckets
+      std::size_t _M_min;
+      std::size_t _M_total;
+      std::size_t _M_item_min;  // range of # items
+      std::size_t _M_item_max;
+      std::size_t _M_item_total;
+      std::size_t _M_count;
+      std::size_t _M_insert;
+      std::size_t _M_iterate;
+      std::size_t _M_erase;
+      std::size_t _M_find;
+      std::size_t _M_lower_bound;
+      std::size_t _M_upper_bound;
+      std::size_t _M_equal_range;
+      std::size_t _M_push_back;
+      std::size_t _M_resize;
+      std::size_t _M_cost;
+  };
+
+
+  /** @brief A container statistics instrumentation line in the stack table.  */
+  class __container_statistics_stack_info
+    : public __container_statistics_info
+  {
+    public:
+      __container_statistics_stack_info(const __container_statistics_info& __o)
+        : __container_statistics_info(__o) { }
+  };
+
+
+  /** @brief Container size instrumentation trace producer.  */
+  class __trace_container_statistics
+    : public __trace_base<__container_statistics_info, __container_statistics_stack_info>
+  {
+    public:
+      ~__trace_container_statistics() { }
+
+      __trace_container_statistics()
+        : __trace_base<__container_statistics_info, __container_statistics_stack_info>() { };
+
+      // Insert a new node at construct with object, callstack and initial size.
+      void
+        __insert(const __object_t __obj, __stack_t __stack, std::size_t __num)
+        { __add_object(__obj, __container_statistics_info(__stack, __num)); }
+
+      // XXX Undefined?
+      void
+        __construct(const void* __obj, std::size_t __inum);
+
+      // Call at destruction/clean to set container final size.
+      void
+        __opr_destruct(const void* __obj, std::size_t __num, std::size_t __inum)
+        {
+          if (!__is_on())
+            return;
+
+          __object_t __obj_handle = static_cast<__object_t>(__obj);
+
+          __container_statistics_info* __object_info = __get_object_info(__obj_handle);
+          if (!__object_info)
+            return;
+
+          __object_info->__opr_destruct(__num, __inum);
+          __retire_object(__obj_handle);
+        }
+
+      void
+        __opr_insert(const void* __obj, std::size_t __pos, std::size_t __num)
+        {
+          if (!__is_on())
+            return;
+
+          __container_statistics_info* __object_info = __get_object_info(__obj);
+          if (!__object_info)
+            return;
+
+          __object_info->__opr_insert(__pos, __num);
+        }
+
+      void
+        __opr_erase(const void* __obj, std::size_t __pos, std::size_t __num)
+        {
+          if (!__is_on())
+            return;
+
+          __container_statistics_info* __object_info = __get_object_info(__obj);
+          if (!__object_info)
+            return;
+
+          __object_info->__opr_erase(__pos, __num);
+        }
+
+      void
+        __opr_iterate(const void* __obj, std::size_t __num)
+        {
+          if (!__is_on())
+            return;
+
+          __container_statistics_info* __object_info = __get_object_info(__obj);
+          if (!__object_info)
+            return;
+
+          __object_info->__opr_iterate(__num);
+        }
+
+      void
+        __opr_invalid_operator(const void* __obj)
+        {
+          if (!__is_on())
+            return;
+
+          __container_statistics_info* __object_info = __get_object_info(__obj);
+          if (!__object_info)
+            return;
+
+          __object_info->__opr_invalid_operator(__obj);
+        }
+
+
+      // Call at resize to set resize/cost information.
+      void
+        __opr_resize(const void* __obj, int __from, int __to)
+        {
+          if (!__is_on())
+            return;
+
+          __container_statistics_info* __object_info = __get_object_info(__obj);
+          if (!__object_info)
+            return;
+
+          __object_info->__opr_resize(__from, __to);
+        }
+
+      void
+        __opr_find(const void* __obj, std::size_t __size)
+        {
+          if (!__is_on())
+            return;
+
+          __container_statistics_info* __object_info = __get_object_info(__obj);
+          if (!__object_info)
+            return;
+
+          __object_info->__opr_find(__obj, __size);
+        }
+
+      void
+        __opr_upper_bound(const void* __obj, std::size_t __size)
+        {
+          if (!__is_on())
+            return;
+
+          __container_statistics_info* __object_info = __get_object_info(__obj);
+          if (!__object_info)
+            return;
+
+          __object_info->__opr_upper_bound(__obj, __size);
+        }
+
+      void
+        __opr_equal_range(const void* __obj, std::size_t __size)
+        {
+          if (!__is_on())
+            return;
+
+          __container_statistics_info* __object_info = __get_object_info(__obj);
+          if (!__object_info)
+            return;
+
+          __object_info->__opr_equal_range(__obj, __size);
+        }
+
+      void
+        __opr_lower_bound(const void* __obj, std::size_t __size)
+        {
+          if (!__is_on())
+            return;
+
+          __container_statistics_info* __object_info = __get_object_info(__obj);
+          if (!__object_info)
+            return;
+
+          __object_info->__opr_lower_bound(__obj, __size);
+        }
+
+      void
+        __opr_push_back(const void* __obj)
+        {
+          if (!__is_on())
+            return;
+
+          __container_statistics_info* __object_info = __get_object_info(__obj);
+          if (!__object_info)
+            return;
+
+          __object_info->__opr_push_back();
+        }
+
+  };
+
+} // namespace __gnu_profile
+#endif /* _GLIBCXX_PROFILE_PROFILER_CONTAINER_STATISTICS_H */
+
diff --git a/libstdc++-v3/include/profile/impl/profiler_map_statistics.h b/libstdc++-v3/include/profile/impl/profiler_map_statistics.h
new file mode 100644
index 0000000..5a775ae
--- /dev/null
+++ b/libstdc++-v3/include/profile/impl/profiler_map_statistics.h
@@ -0,0 +1,151 @@
+// -*- C++ -*-
+//
+// Copyright (C) 2013 Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 3, or (at your option)
+// any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// Under Section 7 of GPL version 3, you are granted additional
+// permissions described in the GCC Runtime Library Exception, version
+// 3.1, as published by the Free Software Foundation.
+
+// You should have received a copy of the GNU General Public License along
+// with this library; see the file COPYING3.  If not see
+// <http://www.gnu.org/licenses/>.
+
+/** @file profile/impl/profiler_map_statistics.h
+ *  @brief Collection of map statistics traces.
+ */
+
+// Written by Gedare Bloom.
+
+#ifndef _GLIBCXX_PROFILE_PROFILER_MAP_STATISTICS_H
+#define _GLIBCXX_PROFILE_PROFILER_MAP_STATISTICS_H 1
+
+#include "profile/impl/profiler.h"
+#include "profile/impl/profiler_node.h"
+#include "profile/impl/profiler_trace.h"
+#include "profile/impl/profiler_state.h"
+#include "profile/impl/profiler_container_statistics.h"
+
+namespace __gnu_profile
+{
+  /** @brief map statistics instrumentation trace producer.  */
+  class __trace_map_statistics
+    : public __trace_container_statistics
+  {
+    public:
+      __trace_map_statistics()
+        : __trace_container_statistics()
+      { __id = "map-statistics"; }
+  };
+
+  inline void
+    __trace_map_statistics_init()
+    { _GLIBCXX_PROFILE_DATA(_S_map_statistics) = new __trace_map_statistics(); }
+
+  inline void
+    __trace_map_statistics_report(FILE* __f, __warning_vector_t& __warnings)
+    {
+      if (_GLIBCXX_PROFILE_DATA(_S_map_statistics))
+      {
+        _GLIBCXX_PROFILE_DATA(_S_map_statistics)->__collect_warnings(__warnings);
+        _GLIBCXX_PROFILE_DATA(_S_map_statistics)->__write(__f);
+      }
+    }
+
+  inline void
+    __trace_map_statistics_construct(const void* __obj)
+    {
+      if (!__profcxx_init())
+        return;
+
+      _GLIBCXX_PROFILE_DATA(_S_map_statistics)->__insert(__obj, __get_stack(), 0);
+    }
+
+  inline void
+    __trace_map_statistics_destruct(const void* __obj, std::size_t __num,
+        std::size_t __inum)
+    {
+      if (!__profcxx_init())
+        return;
+
+      _GLIBCXX_PROFILE_DATA(_S_map_statistics)->__opr_destruct(__obj, __num, __inum);
+    }
+
+  inline void
+  __trace_map_statistics_insert(const void* __obj, std::size_t __pos,
+				std::size_t __num)
+  {
+    if (!__profcxx_init())
+      return;
+
+    _GLIBCXX_PROFILE_DATA(_S_map_statistics)->__opr_insert(__obj, __pos, __num);
+  }
+
+  inline void
+  __trace_map_statistics_erase(const void* __obj, std::size_t __pos,
+				std::size_t __num)
+  {
+    if (!__profcxx_init())
+      return;
+
+    _GLIBCXX_PROFILE_DATA(_S_map_statistics)->__opr_erase(__obj, __pos, __num);
+  }
+
+  inline void
+  __trace_map_statistics_invalid_operator(const void* __obj)
+  {
+    if (!__profcxx_init())
+      return;
+
+    _GLIBCXX_PROFILE_DATA(_S_map_statistics)->__opr_invalid_operator(__obj);
+  }
+
+  inline void
+  __trace_map_statistics_find(const void* __obj, std::size_t __size)
+  {
+    if (!__profcxx_init())
+      return;
+
+    _GLIBCXX_PROFILE_DATA(_S_map_statistics)->__opr_find(__obj, __size);
+  }
+
+  inline void
+  __trace_map_statistics_lower_bound(const void* __obj, std::size_t __size)
+  {
+    if (!__profcxx_init())
+      return;
+
+    _GLIBCXX_PROFILE_DATA(_S_map_statistics)->__opr_lower_bound(__obj, __size);
+  }
+
+  inline void
+  __trace_map_statistics_upper_bound(const void* __obj, std::size_t __size)
+  {
+    if (!__profcxx_init())
+      return;
+
+    _GLIBCXX_PROFILE_DATA(_S_map_statistics)->__opr_upper_bound(__obj, __size);
+  }
+
+  inline void
+  __trace_map_statistics_equal_range(const void* __obj, std::size_t __size)
+  {
+    if (!__profcxx_init())
+      return;
+
+    _GLIBCXX_PROFILE_DATA(_S_map_statistics)->__opr_equal_range(__obj, __size);
+  }
+
+} // namespace __gnu_profile
+
+#endif /* _GLIBCXX_PROFILE_PROFILER_MAP_STATISTICS_H */
diff --git a/libstdc++-v3/include/profile/impl/profiler_trace.h b/libstdc++-v3/include/profile/impl/profiler_trace.h
index c5907f8..71013e2 100644
--- a/libstdc++-v3/include/profile/impl/profiler_trace.h
+++ b/libstdc++-v3/include/profile/impl/profiler_trace.h
@@ -100,12 +100,16 @@ namespace __gnu_profile
   class __trace_vector_to_list;
   class __trace_list_to_slist; 
   class __trace_list_to_vector; 
+  class __trace_vector_statistics;
+  class __trace_map_statistics;
   void __trace_vector_size_init();
   void __trace_hashtable_size_init();
   void __trace_hash_func_init();
   void __trace_vector_to_list_init();
   void __trace_list_to_slist_init();  
   void __trace_list_to_vector_init();  
+  void __trace_vector_statistics_init();
+  void __trace_map_statistics_init();
   void __trace_map_to_unordered_map_init();
   void __trace_vector_size_report(FILE*, __warning_vector_t&);
   void __trace_hashtable_size_report(FILE*, __warning_vector_t&);
@@ -114,6 +118,8 @@ namespace __gnu_profile
   void __trace_list_to_slist_report(FILE*, __warning_vector_t&); 
   void __trace_list_to_vector_report(FILE*, __warning_vector_t&);
   void __trace_map_to_unordered_map_report(FILE*, __warning_vector_t&);
+  void __trace_vector_statistics_report(FILE*, __warning_vector_t&);
+  void __trace_map_statistics_report(FILE*, __warning_vector_t&);
 
   struct __cost_factor
   {
@@ -130,6 +136,8 @@ namespace __gnu_profile
   _GLIBCXX_PROFILE_DEFINE_DATA(__trace_vector_to_list*, _S_vector_to_list, 0);
   _GLIBCXX_PROFILE_DEFINE_DATA(__trace_list_to_slist*, _S_list_to_slist, 0); 
   _GLIBCXX_PROFILE_DEFINE_DATA(__trace_list_to_vector*, _S_list_to_vector, 0);
+  _GLIBCXX_PROFILE_DEFINE_DATA(__trace_vector_statistics*, _S_vector_statistics, 0);
+  _GLIBCXX_PROFILE_DEFINE_DATA(__trace_map_statistics*, _S_map_statistics, 0);
 
   _GLIBCXX_PROFILE_DEFINE_DATA(__cost_factor, __vector_shift_cost_factor, 
 			       {"__vector_shift_cost_factor", 1.0});
@@ -444,6 +452,8 @@ namespace __gnu_profile
     __warning_vector_t __warnings, __top_warnings;
 
     FILE* __raw_file = __open_output_file("raw");
+    __trace_vector_statistics_report(__raw_file, __warnings);
+    __trace_map_statistics_report(__raw_file, __warnings);
     __trace_vector_size_report(__raw_file, __warnings);
     __trace_hashtable_size_report(__raw_file, __warnings);
     __trace_hash_func_report(__raw_file, __warnings);
@@ -631,6 +641,8 @@ namespace __gnu_profile
 	    __trace_list_to_slist_init(); 
 	    __trace_list_to_vector_init();
 	    __trace_map_to_unordered_map_init();
+	    __trace_vector_statistics_init();
+	    __trace_map_statistics_init();
 
 	    std::atexit(__report);
 
diff --git a/libstdc++-v3/include/profile/impl/profiler_vector_statistics.h b/libstdc++-v3/include/profile/impl/profiler_vector_statistics.h
new file mode 100644
index 0000000..460e787
--- /dev/null
+++ b/libstdc++-v3/include/profile/impl/profiler_vector_statistics.h
@@ -0,0 +1,135 @@
+// -*- C++ -*-
+//
+// Copyright (C) 2013 Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 3, or (at your option)
+// any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// Under Section 7 of GPL version 3, you are granted additional
+// permissions described in the GCC Runtime Library Exception, version
+// 3.1, as published by the Free Software Foundation.
+
+// You should have received a copy of the GNU General Public License along
+// with this library; see the file COPYING3.  If not see
+// <http://www.gnu.org/licenses/>.
+
+/** @file profile/impl/profiler_vector_statistics.h
+ *  @brief Collection of vector statistics traces.
+ */
+
+// Written by Gedare Bloom.
+
+#ifndef _GLIBCXX_PROFILE_PROFILER_VECTOR_STATISTICS_H
+#define _GLIBCXX_PROFILE_PROFILER_VECTOR_STATISTICS_H 1
+
+#include "profile/impl/profiler.h"
+#include "profile/impl/profiler_node.h"
+#include "profile/impl/profiler_trace.h"
+#include "profile/impl/profiler_state.h"
+#include "profile/impl/profiler_container_statistics.h"
+
+namespace __gnu_profile
+{
+  /** @brief vector statistics instrumentation trace producer.  */
+  class __trace_vector_statistics
+    : public __trace_container_statistics
+  {
+    public:
+      __trace_vector_statistics()
+        : __trace_container_statistics()
+      { __id = "vector-statistics"; }
+  };
+
+  inline void
+    __trace_vector_statistics_init()
+    { _GLIBCXX_PROFILE_DATA(_S_vector_statistics) = new __trace_vector_statistics(); }
+
+  inline void
+    __trace_vector_statistics_report(FILE* __f, __warning_vector_t& __warnings)
+    {
+      if (_GLIBCXX_PROFILE_DATA(_S_vector_statistics))
+      {
+        _GLIBCXX_PROFILE_DATA(_S_vector_statistics)->__collect_warnings(__warnings);
+        _GLIBCXX_PROFILE_DATA(_S_vector_statistics)->__write(__f);
+      }
+    }
+
+  inline void
+    __trace_vector_statistics_construct(const void* __obj, std::size_t __num)
+    {
+      if (!__profcxx_init())
+        return;
+
+      _GLIBCXX_PROFILE_DATA(_S_vector_statistics)->__insert(__obj, __get_stack(),
+          __num);
+    }
+
+  inline void
+    __trace_vector_statistics_destruct(const void* __obj, std::size_t __num,
+        std::size_t __inum)
+    {
+      if (!__profcxx_init())
+        return;
+
+      _GLIBCXX_PROFILE_DATA(_S_vector_statistics)->__opr_destruct(__obj, __num, __inum);
+    }
+
+  inline void
+  __trace_vector_statistics_insert(const void* __obj, std::size_t __pos,
+				std::size_t __num)
+  {
+    if (!__profcxx_init())
+      return;
+
+    _GLIBCXX_PROFILE_DATA(_S_vector_statistics)->__opr_insert(__obj, __pos, __num);
+  }
+
+  inline void
+  __trace_vector_statistics_erase(const void* __obj, std::size_t __pos,
+				std::size_t __num)
+  {
+    if (!__profcxx_init())
+      return;
+
+    _GLIBCXX_PROFILE_DATA(_S_vector_statistics)->__opr_erase(__obj, __pos, __num);
+  }
+
+  inline void
+  __trace_vector_statistics_invalid_operator(const void* __obj)
+  {
+    if (!__profcxx_init())
+      return;
+
+    _GLIBCXX_PROFILE_DATA(_S_vector_statistics)->__opr_invalid_operator(__obj);
+  }
+
+  inline void
+    __trace_vector_statistics_resize(const void* __obj, std::size_t __from,
+        std::size_t __to)
+    {
+      if (!__profcxx_init())
+        return;
+
+      _GLIBCXX_PROFILE_DATA(_S_vector_statistics)->__opr_resize(__obj, __from, __to);
+    }
+
+  inline void
+  __trace_vector_statistics_push_back(const void* __obj)
+  {
+    if (!__profcxx_init())
+      return;
+
+    _GLIBCXX_PROFILE_DATA(_S_vector_statistics)->__opr_push_back(__obj);
+  }
+
+} // namespace __gnu_profile
+
+#endif /* _GLIBCXX_PROFILE_PROFILER_VECTOR_STATISTICS_H */
diff --git a/libstdc++-v3/include/profile/map.h b/libstdc++-v3/include/profile/map.h
index 44af2bc..3b32c0a 100644
--- a/libstdc++-v3/include/profile/map.h
+++ b/libstdc++-v3/include/profile/map.h
@@ -67,7 +67,10 @@ namespace __profile
       map(const _Compare& __comp = _Compare(),
 	  const _Allocator& __a = _Allocator())
       : _Base(__comp, __a)
-      { __profcxx_map_to_unordered_map_construct(this); }
+      {
+        __profcxx_map_to_unordered_map_construct(this);
+        __profcxx_map_statistics_construct(this);
+      }
 
 #if __cplusplus >= 201103L
       template<typename _InputIterator,
@@ -79,15 +82,24 @@ namespace __profile
 	    const _Compare& __comp = _Compare(),
 	    const _Allocator& __a = _Allocator())
 	: _Base(__first, __last, __comp, __a)
-        { __profcxx_map_to_unordered_map_construct(this); }
+        {
+          __profcxx_map_to_unordered_map_construct(this);
+          __profcxx_map_statistics_construct(this);
+        }
 
       map(const map& __x)
       : _Base(__x)
-      { __profcxx_map_to_unordered_map_construct(this); }
+      {
+        __profcxx_map_to_unordered_map_construct(this);
+        __profcxx_map_statistics_construct(this);
+      }
 
       map(const _Base& __x)
       : _Base(__x)
-      { __profcxx_map_to_unordered_map_construct(this); }
+      {
+        __profcxx_map_to_unordered_map_construct(this);
+        __profcxx_map_statistics_construct(this);
+      }
 
 #if __cplusplus >= 201103L
       map(map&& __x)
@@ -102,7 +114,10 @@ namespace __profile
 #endif
 
       ~map() _GLIBCXX_NOEXCEPT
-      { __profcxx_map_to_unordered_map_destruct(this); }
+      {
+        __profcxx_map_to_unordered_map_destruct(this);
+        __profcxx_map_statistics_destruct(this, 0, this->size());
+      }
 
       map&
       operator=(const map& __x)
@@ -214,7 +229,9 @@ namespace __profile
       operator[](const key_type& __k)
       {
         __profcxx_map_to_unordered_map_find(this, size());
-        return _Base::operator[](__k);
+        __profcxx_map_statistics_find(this, size());
+        mapped_type& rv = _Base::operator[](__k);
+        return rv;
       }
 
 #if __cplusplus >= 201103L
@@ -222,7 +239,9 @@ namespace __profile
       operator[](key_type&& __k)
       {
         __profcxx_map_to_unordered_map_find(this, size());
-        return _Base::operator[](std::move(__k));
+        __profcxx_map_statistics_find(this, size());
+        mapped_type& rv = _Base::operator[](std::move(__k));
+        return rv;
       }
 #endif
 
@@ -230,14 +249,18 @@ namespace __profile
       at(const key_type& __k)
       {
         __profcxx_map_to_unordered_map_find(this, size());
-        return _Base::at(__k);
+        __profcxx_map_statistics_find(this, size());
+        mapped_type& rv = _Base::at(__k);
+        return rv;
       }
 
       const mapped_type&
       at(const key_type& __k) const
       {
         __profcxx_map_to_unordered_map_find(this, size());
-        return _Base::at(__k);
+        __profcxx_map_statistics_find(this, size());
+        const mapped_type& rv = _Base::at(__k);
+        return rv;
       }
 
       // modifiers:
@@ -247,6 +270,7 @@ namespace __profile
 	emplace(_Args&&... __args)
 	{
 	  __profcxx_map_to_unordered_map_insert(this, size(), 1);
+    __profcxx_map_statistics_insert(this, size(), 1);
 	  auto __res = _Base::emplace(std::forward<_Args>(__args)...);
 	  return std::pair<iterator, bool>(iterator(__res.first),
 					   __res.second);
@@ -261,6 +285,7 @@ namespace __profile
 					   std::forward<_Args>(__args)...);
 	  __profcxx_map_to_unordered_map_insert(this, size_before,
 						size() - size_before);
+    __profcxx_map_statistics_insert(this, size_before, size() - size_before);
 	  return __res;
 	}
 #endif
@@ -270,6 +295,7 @@ namespace __profile
       {
         __profcxx_map_to_unordered_map_insert(this, size(), 1);
 	typedef typename _Base::iterator _Base_iterator;
+        __profcxx_map_statistics_insert(this, size(), 1);
 	std::pair<_Base_iterator, bool> __res = _Base::insert(__x);
 	return std::pair<iterator, bool>(iterator(__res.first),
 					 __res.second);
@@ -284,6 +310,7 @@ namespace __profile
         {
 	  __profcxx_map_to_unordered_map_insert(this, size(), 1);
 	  typedef typename _Base::iterator _Base_iterator;
+        __profcxx_map_statistics_insert(this, size(), 1);
 	  std::pair<_Base_iterator, bool> __res
 	    = _Base::insert(std::forward<_Pair>(__x));
 	  return std::pair<iterator, bool>(iterator(__res.first),
@@ -297,6 +324,7 @@ namespace __profile
       { 
         size_type size_before = size();
         _Base::insert(__list); 
+        __profcxx_map_statistics_insert(this, size_before, size()-size_before);
         __profcxx_map_to_unordered_map_insert(this, size_before, 
 					      size() - size_before);
       }
@@ -326,6 +354,7 @@ namespace __profile
 	  size_type size_before = size();
 	  iterator __i
 	    = iterator(_Base::insert(__position, std::forward<_Pair>(__x)));
+	      __profcxx_map_statistics_insert(this, size_before, size()-size_before);
 	  __profcxx_map_to_unordered_map_insert(this, size_before, 
 						size() - size_before);
 	  return __i;
@@ -343,6 +372,7 @@ namespace __profile
         {
           size_type size_before = size();
 	  _Base::insert(__first, __last);
+          __profcxx_map_statistics_insert(this, size_before, size()-size_before);
           __profcxx_map_to_unordered_map_insert(this, size_before, 
                                                 size() - size_before);
 	}
@@ -351,7 +381,9 @@ namespace __profile
       iterator
       erase(const_iterator __position)
       {
+          size_type size_before = size();
 	iterator __i = _Base::erase(__position);
+          __profcxx_map_statistics_erase(this, size_before, size()-size_before);
         __profcxx_map_to_unordered_map_erase(this, size(), 1);
         return __i;
       }
@@ -364,6 +396,7 @@ namespace __profile
       erase(iterator __position)
       {
 	_Base::erase(__position);
+          __profcxx_map_statistics_erase(this, size(), 1);
         __profcxx_map_to_unordered_map_erase(this, size(), 1);
       }
 #endif
@@ -376,7 +409,9 @@ namespace __profile
 	  return 0;
 	else
 	{
+          size_type size_before = size();
 	  _Base::erase(__victim);
+          __profcxx_map_statistics_erase(this, size(), 1);
 	  return 1;
 	}
       }
@@ -384,11 +419,20 @@ namespace __profile
 #if __cplusplus >= 201103L
       iterator
       erase(const_iterator __first, const_iterator __last)
-      { return iterator(_Base::erase(__first, __last)); }
+      {
+          size_type size_before = size();
+        iterator __i = _Base::erase(__first, __last);
+        __profcxx_map_statistics_erase(this, size_before, size_before - size());
+        return __i;
+      }
 #else
       void
       erase(iterator __first, iterator __last)
-      { _Base::erase(__first, __last); }
+      {
+          size_type size_before = size();
+        _Base::erase(__first, __last);
+        __profcxx_map_statistics_erase(this, size_before, size_before - size());
+      }
 #endif
 
       void
@@ -407,56 +451,74 @@ namespace __profile
       iterator
       find(const key_type& __x)
       {
+        iterator __i;
         __profcxx_map_to_unordered_map_find(this, size());
-        return iterator(_Base::find(__x));
+        __profcxx_map_statistics_find(this, size());
+        __i = iterator(_Base::find(__x));
+        return __i;
       }
 
       const_iterator
       find(const key_type& __x) const
       {
+        const_iterator __i;
         __profcxx_map_to_unordered_map_find(this, size());
-        return const_iterator(_Base::find(__x));
+        __profcxx_map_statistics_find(this, size());
+        __i = const_iterator(_Base::find(__x));
+        return __i;
       }
 
       size_type
       count(const key_type& __x) const
       {
+        size_type rv;
         __profcxx_map_to_unordered_map_find(this, size());
-        return _Base::count(__x);
+        __profcxx_map_statistics_find(this, size()); // FIXME
+        rv = _Base::count(__x);
+        return rv;
       }
 
       iterator
       lower_bound(const key_type& __x)
       { 
         __profcxx_map_to_unordered_map_invalidate(this);
-        return iterator(_Base::lower_bound(__x)); 
+        __profcxx_map_statistics_lower_bound(this, size());
+        iterator __i = _Base::lower_bound(__x);
+        return __i;
       }
 
       const_iterator
       lower_bound(const key_type& __x) const
       { 
         __profcxx_map_to_unordered_map_invalidate(this);
-        return const_iterator(_Base::lower_bound(__x)); 
+        __profcxx_map_statistics_lower_bound(this, size());
+        const_iterator __i = _Base::lower_bound(__x);
+        return __i;
       }
 
       iterator
       upper_bound(const key_type& __x)
       { 
         __profcxx_map_to_unordered_map_invalidate(this);
-        return iterator(_Base::upper_bound(__x)); 
+        __profcxx_map_statistics_upper_bound(this, size());
+        iterator __i = _Base::upper_bound(__x);
+        return __i;
       }
 
       const_iterator
       upper_bound(const key_type& __x) const
       { 
         __profcxx_map_to_unordered_map_invalidate(this);
-        return const_iterator(_Base::upper_bound(__x)); 
+        __profcxx_map_statistics_upper_bound(this, size());
+        const_iterator __i = _Base::upper_bound(__x);
+        return __i;
       }
 
       std::pair<iterator,iterator>
       equal_range(const key_type& __x)
       {
 	typedef typename _Base::iterator _Base_iterator;
+        __profcxx_map_statistics_equal_range(this, size());
 	std::pair<_Base_iterator, _Base_iterator> __res =
 	_Base::equal_range(__x);
 	return std::make_pair(iterator(__res.first),
@@ -467,6 +529,7 @@ namespace __profile
       equal_range(const key_type& __x) const
       {
         __profcxx_map_to_unordered_map_find(this, size());
+        __profcxx_map_statistics_equal_range(this, size());
 	typedef typename _Base::const_iterator _Base_const_iterator;
 	std::pair<_Base_const_iterator, _Base_const_iterator> __res =
 	_Base::equal_range(__x);
diff --git a/libstdc++-v3/include/profile/vector b/libstdc++-v3/include/profile/vector
index 74a3030..0ced3fa 100644
--- a/libstdc++-v3/include/profile/vector
+++ b/libstdc++-v3/include/profile/vector
@@ -80,6 +80,7 @@ namespace __profile
       {
         __profcxx_vector_construct(this, this->capacity());
         __profcxx_vector_construct2(this);
+        __profcxx_vector_statistics_construct(this, this->capacity());
       }
 
 #if __cplusplus >= 201103L
@@ -89,6 +90,7 @@ namespace __profile
       {
         __profcxx_vector_construct(this, this->capacity());
         __profcxx_vector_construct2(this);
+        __profcxx_vector_statistics_construct(this, this->capacity());
       }
 
       vector(size_type __n, const _Tp& __value,
@@ -97,6 +99,7 @@ namespace __profile
       {
         __profcxx_vector_construct(this, this->capacity());
         __profcxx_vector_construct2(this);
+        __profcxx_vector_statistics_construct(this, this->capacity());
       }
 #else
       explicit
@@ -106,6 +109,7 @@ namespace __profile
       {
         __profcxx_vector_construct(this, this->capacity());
         __profcxx_vector_construct2(this);
+        __profcxx_vector_statistics_construct(this, this->capacity());
       }
 #endif
 
@@ -121,6 +125,7 @@ namespace __profile
         {
 	  __profcxx_vector_construct(this, this->capacity());
 	  __profcxx_vector_construct2(this);
+    __profcxx_vector_statistics_construct(this, this->capacity());
 	}
 
       vector(const vector& __x)
@@ -128,6 +133,7 @@ namespace __profile
       {
         __profcxx_vector_construct(this, this->capacity());
         __profcxx_vector_construct2(this);
+        __profcxx_vector_statistics_construct(this, this->capacity());
       }
 
       /// Construction from a release-mode vector
@@ -136,6 +142,7 @@ namespace __profile
       { 
         __profcxx_vector_construct(this, this->capacity());
         __profcxx_vector_construct2(this);
+        __profcxx_vector_statistics_construct(this, this->capacity());
       }
 
 #if __cplusplus >= 201103L
@@ -144,6 +151,7 @@ namespace __profile
       {
         __profcxx_vector_construct(this, this->capacity());
         __profcxx_vector_construct2(this);
+        __profcxx_vector_statistics_construct(this, this->capacity());
       }
 
       vector(const _Base& __x, const _Allocator& __a)
@@ -151,6 +159,7 @@ namespace __profile
       { 
         __profcxx_vector_construct(this, this->capacity());
         __profcxx_vector_construct2(this);
+        __profcxx_vector_statistics_construct(this, this->capacity());
       }
 
       vector(vector&& __x, const _Allocator& __a) noexcept
@@ -158,6 +167,7 @@ namespace __profile
       {
         __profcxx_vector_construct(this, this->capacity());
         __profcxx_vector_construct2(this);
+        __profcxx_vector_statistics_construct(this, this->capacity());
       }
 
       vector(initializer_list<value_type> __l,
@@ -169,6 +179,7 @@ namespace __profile
       {
         __profcxx_vector_destruct(this, this->capacity(), this->size());
         __profcxx_vector_destruct2(this);
+        __profcxx_vector_statistics_destruct(this, this->capacity(), this->size());
       }
 
       vector&
@@ -184,6 +195,7 @@ namespace __profile
       {
 	__profcxx_vector_destruct(this, this->capacity(), this->size());
 	__profcxx_vector_destruct2(this);
+  __profcxx_vector_statistics_destruct(this, this->capacity(), this->size());
 	static_cast<_Base&>(*this) = std::move(__x);
 	return *this;
       }
@@ -336,8 +348,10 @@ namespace __profile
       push_back(const _Tp& __x)
       {
         size_type __old_size = this->capacity();
+
+        __profcxx_vector_statistics_push_back(this);
 	_Base::push_back(__x);
-        _M_profile_resize(this, __old_size, this->capacity());
+        _M_profile_resize(this, __old_size, this->capacity()); // XXX
       }
 
 #if __cplusplus >= 201103L
@@ -345,6 +359,7 @@ namespace __profile
       push_back(_Tp&& __x)
       {
         size_type __old_size = this->capacity();
+        __profcxx_vector_statistics_push_back(this);
         _Base::push_back(std::move(__x));
         _M_profile_resize(this, __old_size, this->capacity());
       }
@@ -357,7 +372,11 @@ namespace __profile
         __profcxx_vector_insert(this, __position.base() - _Base::begin(),
                                 this->size());
         size_type __old_size = this->capacity();
+        size_type size_before = this->size();
 	typename _Base::iterator __res = _Base::insert(__position.base(), __x);
+        __profcxx_vector_statistics_insert(this,
+                                __position.base() - _Base::begin(),
+                                size_before - this->size() );
         _M_profile_resize(this, __old_size, this->capacity());
 	return iterator(__res, this);
       }
@@ -369,7 +388,11 @@ namespace __profile
         __profcxx_vector_insert(this, __position.base() - _Base::begin(),
                                 this->size());
         size_type __old_size = this->capacity();
+        size_type size_before = this->size();
 	typename _Base::iterator __res = _Base::insert(__position.base(), __x);
+        __profcxx_vector_statistics_insert(this,
+                                __position.base() - _Base::begin(),
+                                size_before - this->size());
         _M_profile_resize(this, __old_size, this->capacity());
 	return iterator(__res, this);
       }
@@ -402,7 +425,11 @@ namespace __profile
         __profcxx_vector_insert(this, __position.base() - _Base::begin(),
                                 this->size());
         size_type __old_size = this->capacity();
+        size_type size_before = this->size();
         _Base::insert(__position, __n, __x);
+        __profcxx_vector_statistics_insert(this,
+                                __position.base() - _Base::begin(),
+                                size_before - this->size());
         _M_profile_resize(this, __old_size, this->capacity());
       }
 
@@ -419,7 +446,11 @@ namespace __profile
         __profcxx_vector_insert(this, __position.base()-_Base::begin(),
                                 this->size());
         size_type __old_size = this->capacity();
+        size_type size_before = this->size();
         _Base::insert(__position, __first, __last);
+        __profcxx_vector_statistics_insert(this,
+                                __position.base() - _Base::begin(),
+                                size_before - this->size());
         _M_profile_resize(this, __old_size, this->capacity());
       }
 
@@ -427,17 +458,26 @@ namespace __profile
       iterator
       erase(iterator __position)
       {
-	typename _Base::iterator __res = _Base::erase(__position.base());
+        size_type size_before = this->size();
+	typename _Base::iterator __res = _Base::erase(__position.base()); // XXX
+        __profcxx_vector_statistics_erase(this,
+                                __position.base() - _Base::begin(),
+                                this->size() - size_before);
 	return iterator(__res, this);
       }
 
       iterator
       erase(iterator __first, iterator __last)
       {
+        size_type size_before = this->size();
 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 	// 151. can't currently clear() empty container
 	typename _Base::iterator __res = _Base::erase(__first.base(),
                                                       __last.base());
+        __profcxx_vector_statistics_erase(this,
+                                __first.base() - _Base::begin(),
+                                this->size() - size_before);
+
 	return iterator(__res, this);
       }
 
@@ -446,12 +486,13 @@ namespace __profile
       {
         __profcxx_vector_destruct(this, this->capacity(), this->size());
         __profcxx_vector_destruct2(this);
+        __profcxx_vector_statistics_destruct(this, this->capacity(), this->size());
         _Base::clear();
       }
 
       inline void _M_profile_find() const 
       { 
-        __profcxx_vector_find(this, size()); 
+        __profcxx_vector_statistics_find(this, size());
       }
 
       inline void _M_profile_iterate(int __rewind = 0) const 
@@ -466,6 +507,7 @@ namespace __profile
         if (__old_size < __new_size) {
           __profcxx_vector_resize(this, this->size(), __new_size);
           __profcxx_vector_resize2(this, this->size(), __new_size);
+          __profcxx_vector_statistics_resize(this, this->size(), __new_size);
         }
       }
     };
-- 
1.7.9.5

